#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
// var debug = require('debug')('demo:server')
var http = require('http')
const config = require('../config/config')

/**
 * make a log directory, just in case it isn't there.
 */
try {
  require('fs').mkdirSync('./log')
} catch (e) {
  if (e.code !== 'EEXIST') {
    console.error('Could not set up log directory, error was: ', e)
    process.exit(1)
  }
}

/**
 * Initialise log4js first, so we don't miss any log messages
 */
var log4js = require('log4js')
log4js.configure('./config/log4js.json')
const log_startup = log4js.getLogger('startup')
log_startup.info('server is starting...')
const startTime = new Date()

/**
 * Get port from environment and store in Express.
 */
const port = process.env.NODE_ENV === 'production' ? config.production.port : config.development.port

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback())

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log_startup.error(`${bind} requires elevated privileges - ${new Date() - startTime}ms`)
      process.exit(1)
    case 'EADDRINUSE':

      log_startup.error(`${bind} is already in use`)
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  log_startup.info(`Server is started - ${new Date() - startTime}ms - listening on ${bind}`)
}
